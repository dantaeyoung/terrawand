esphome:
  name: "terrawand"
  includes:
    - uart_reader.h

esp32:
  board: featheresp32
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: ""

ota:
  password: ""

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pw

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Entryway Fallback Hotspot"
    password: !secret wifi_pw

captive_portal:

time:
- platform: sntp
  id: sntp_time

mqtt:
  broker: provolotnas.local
  username: cumulusclouds 
  password: !secret mqtt_pw

  on_message:
  - topic: "terrawand1/ping"
    then:
      - mqtt.publish:
          topic: "terrawand1/status"
          payload: display_message
          qos: 1


globals:
  - id: display_message
    type: std::string
    initial_value: '"Hello!"'
  - id: message_color
    type: Color
    initial_value: 'Color(255, 255, 255)'
  - id: sensor_on
    type: bool
    initial_value: 'false'
  - id: start_time
    type: uint32_t
    initial_value: '0'


uart:
  id: uart_bus
  tx_pin: GPIO25
  rx_pin: GPIO26
  baud_rate: 9600
  debug:
    direction: BOTH
    dummy_receiver: false
    after:
      delimiter: "\n"
    sequence:
      - lambda: UARTDebug::log_string(direction, bytes);


  #0x02, 0x00, 0x00, 0x01, 0x00, 0x33, 0x31

# Define the custom UART reader component
text_sensor:
- platform: custom
  lambda: |-
    auto my_uart_reader = new UARTReader(id(uart_bus));
    App.register_component(my_uart_reader);
    return {my_uart_reader};
  text_sensors:
    - name: "Barcode Scanner"
      id: "barcode_scanner"
      filters:
        - lambda: |-
              //ESP_LOGD("custom", "%s", format_hex_pretty((uint8_t *) x.c_str(), x.size()).c_str());

              if (x.size() >= 7 && x[0] == 0x02 && x[1] == 0x00 && x[2] == 0x00 && x[3] == 0x01 && x[4] == 0x00 && x[5] == 0x33 && x[6] == 0x31) {
                // ignore response sequence from barcode scanner
                x = x.substr(7); 
                //ESP_LOGD("custom", "CUT DOWN 7");
              }
              if (x.size() >= 4 && x[0] == 0x02 && x[1] == 0x01 && x[2] == 0x33 && x[3] == 0x31) {
                // ignore response sequence from barcode scanner
                x = x.substr(4); 
                //ESP_LOGD("custom", "CUT DOWN 4");
              }
              return x;

      on_value:
        then:
          - lambda: |-
              id(display_message) =  x;
              id(my_display).update();


              
          - logger.log: "Hello World SCANN"
              
          - mqtt.publish:
              topic: "terrawand1/scan"
              payload: !lambda 'return x;'
              qos: 1
       
switch:
  - platform: template
    name: "Switch"
    lambda: |-
      if (id(barcode_scanner).state == "%(print)%") {
        return true;
      } else {
        return false;
      } 
    turn_on_action:
      - uart.write: "\r*pow=on#\r"
    turn_off_action:
      - uart.write: "\r*pow=off#\r"

  #interval:
  #  - interval: 10s
  #  then:
  #     - uart.write: [0x7E, 0x00, 0x08, 0x01, 0x00, 0x02, 0x01, 0xAB, 0xCD]

button:
  - platform: uart
    name: "Scan Barcode"
    id: scan_barcode
    data: [0x7E, 0x00, 0x08, 0x01, 0x00, 0x02, 0x01, 0xAB, 0xCD]


light:
  - platform: binary
    id: yellow_led
    name: "Yellow LED"
    output: yellow_led_output

output:
  - id: yellow_led_output
    platform: gpio
    pin: GPIO33

spi:
  clk_pin: GPIO18
  mosi_pin: GPIO19

display:
  - platform: st7789v
    id: my_display
    model: TTGO TDisplay 135x240
    backlight_pin: GPIO4
    cs_pin: GPIO5
    dc_pin: GPIO16
    reset_pin: GPIO23
    rotation: 270
    update_interval: 0.9s
    lambda: |-
      it.printf(10, 10, id(roboto_20), id(my_red), TextAlign::TOP_LEFT, "scan: %s", id(display_message).c_str());
      it.strftime(10, 40, id(roboto_20), "%Y-%m-%d %H:%M", id(sntp_time).now());

color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 0%
    green: 0%
    blue: 100%
  - id: my_gray
    red: 50%
    green: 50%
    blue: 50%

font:
  - file: "gfonts://Roboto"
    id: roboto_20
    size: 20
  - file: "gfonts://Roboto"
    id: roboto_30
    size: 30 
  - file: "gfonts://Roboto"
    id: roboto_48
    size: 48 

